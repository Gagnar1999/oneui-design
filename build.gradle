// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.0.20"
        classpath 'com.android.tools.build:gradle:8.7.1'
    }
}


/**
 * Note: To configure GitHub credentials, you have to generate an access token with at least
 * `read:packages` scope at https://github.com/settings/tokens/new and then
 * add it to any of the following:
 * <ul>
 *      <li>Add `githubUsername` and `githubAccessToken` to Global Gradle Properties</li>
 *      <li>Set `GITHUB_USERNAME` and `GITHUB_ACCESS_TOKEN` in your environment variables</li>
 *      <li>Create a `github.properties` file in your project folder with the following content:</li>
 * </ul>
 *
 * <pre>
 *   githubUsername=&lt;YOUR_GITHUB_USERNAME&gt;
 *   githubAccessToken=&lt;YOUR_GITHUB_ACCESS_TOKEN&gt;
 * </pre>
 */
def githubProperties = new Properties().with {
    def file = this.rootProject?.file("github.properties")
    if (file?.exists()) file.withInputStream { load(it) }
    it
}
def githubUsername = githubProperties.getProperty("githubUsername") // github.properties file
        ?: rootProject.findProperty('githubUsername') // Global Gradle Properties
        ?: System.getenv("GITHUB_USERNAME") // Environment variable
        ?: { throw new GradleException('GitHub username not found') }()

def githubAccessToken = githubProperties.getProperty("githubAccessToken") // github.properties file
        ?: rootProject.findProperty('githubAccessToken') // Global Gradle Properties
        ?: System.getenv("GITHUB_ACCESS_TOKEN") // Environment variable
        ?: { throw new GradleException('GitHub access token not found') }()


allprojects {
    repositories {
        google()
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/sesl-androidx")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/sesl-material-components-android")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
        maven {
            url = uri("https://maven.pkg.github.com/tribalfs/oneui-design")
            credentials {
                username = githubUsername
                password = githubAccessToken
            }
        }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
}

subprojects {
    afterEvaluate { project ->
        if (!plugins.hasPlugin("maven-publish")) {
            return
        }

        group = "io.github.tribalfs"
        version = android.defaultConfig.versionName

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = "oneui-design"
                    afterEvaluate {
                        from components.release
                    }
                }
            }

            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/tribalfs/oneui-design")
                    credentials {
                        username = githubUsername
                        password = githubAccessToken
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
